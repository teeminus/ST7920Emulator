/**
 * ST7920Emulator
 * Copyright (C) 2021 Teeminus [https://github.com/teeminus/ST7920Emulator]
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "St7920Emulator.hpp"

St7920Emulator::St7920Emulator(void (*fClearDisplay)(void), void (*fDrawByte)(uint8_t, uint8_t, uint8_t)) :
fClearDisplay_(fClearDisplay),
fDrawByte_(fDrawByte)
{
    // Reset everything
    reset(true);
}

void St7920Emulator::parseCommandByte() {
    // Check highest byte set
    // Set DDRAM/Grapic RAM address
    if ((ui8DataByte_ & 0b10000000) > 0) {
        // Check for extended mode
        if (ui8ExtendedMode_ > 0) {
            // Check if graphic mode is enabled
            if (ui8GraphicMode_ > 0) {
                // Check if current byte is for Y
                if (lastCommand_ != CT_GdramAddress) {
                    // First byte is Y
                    ui8AddressY_ = ui8DataByte_ & 0b111111;

                    // Store command
                    lastCommand_ = CT_GdramAddress;
                } else {
                    // Second byte is X
                    ui8AddressX_ = (ui8DataByte_ & 0b111) * 2;

                    // Check if we need to move the y cursor to the second half of the display
                    if ((ui8DataByte_ & 0b1000) > 0) {
                        ui8AddressY_ = (ui8AddressY_ + 32) & 0b111111;
                    }

                    // Clear command
                    lastCommand_ = CT_None;

                    // Set data target
                    dataTarget_ = DT_GDRAM;
                }
            }
        } else {
            // Set DDRAM address
            ui8AddressX_ = (ui8DataByte_ & 0b111) * 2; // Lower 3 bytes, organized in 16bit blocks
            switch ((ui8DataByte_ >> 3) & 0b11) {// Upper 2 bytes, 16 bit high font
                case 0: ui8AddressY_ = 0; break;
                case 1: ui8AddressY_ = 32; break;
                case 2: ui8AddressY_ = 16; break;
                case 3: ui8AddressY_ = 48; break;
            }

            // Store command
            lastCommand_ = CT_DdramAddress;

            // Set data target
            dataTarget_ = DT_DDRAM;
        }
    }
    // Set CGRAM/IRAM/SCROLL address
    else if ((ui8DataByte_ & 0b1000000) > 0) {
        // Check for extended mode
        if (ui8ExtendedMode_ > 0) {
            // Store command
            lastCommand_ = CT_IramAddress;
        } else {
            // Check if vertial scroll mode is disabled
            if (ui8EnableVerticalScroll_ == 0) {
                // X address is used for byte indexing
                ui8AddressX_ = 0;

                // Y address is character index
                ui8AddressY_ = ui8DataByte_ & 0b111111;

                // Write target is CGRAM
                dataTarget_ = DT_CGRAM;
            }

            // Store command
            lastCommand_ = CT_CgramAddress;
        }
    }
    // (Extended) Function set
    else if ((ui8DataByte_ & 0b100000) > 0) {
        // Check for extended instruction set
        ui8ExtendedMode_ = ui8DataByte_ & 0b100;

        // Check for graphic mode flag
        if (ui8ExtendedMode_ > 0) {
            // Get graphic mode flag
            ui8GraphicMode_ = ui8DataByte_ & 0b10;
        }

        // Store command
        lastCommand_ = CT_FunctionSet;
    }
    // Cursor/Display control
    else if ((ui8DataByte_ & 0b10000) > 0) {
        // Store command
        lastCommand_ = CT_CursorControl;
    }
    // Display on/off
    else if ((ui8DataByte_ & 0b1000) > 0) {
        // Store command
        lastCommand_ = CT_DisplayControl;
    }
    // Entry mode / Reverse
    else if ((ui8DataByte_ & 0b100) > 0) {
        // Log ignoring of command
        if (ui8ExtendedMode_ > 0) {
            // Store command
            lastCommand_ = CT_Reverse;
        } else {
            // Store command
            lastCommand_ = CT_EntryMode;
        }
    }
    // Home / Scroll or ram address select
    else if ((ui8DataByte_ & 0b10) > 0) {
        // Check for extended mode
        if (ui8ExtendedMode_ > 0) {
            // Get vertical scroll enable flag
            ui8EnableVerticalScroll_ = ui8DataByte_ & 0b1;

            // Store command
            lastCommand_ = CT_ScrollSelect;
        } else {
            // Reset cursor
            ui8AddressX_ = ui8AddressY_ = 0;

            // Store command
            lastCommand_ = CT_Home;

            // Update data target
            dataTarget_ = DT_DDRAM;
        }
    }
    // Clear / Stand by
    else if ((ui8DataByte_ & 0b1) > 0) {
        // Check for extended mode
        if (ui8ExtendedMode_ > 0) {
            // Store command
            lastCommand_ = CT_StandBy;
        } else { 
            // Clear DDRAM
            for (uint8_t y = 0; y < 4; ++y){
                for (uint8_t x = 0; x < 32; ++x){
                    pDdRam_[y][x] = 0x20;
                }
            }

            // Reset cursor
            ui8AddressX_ = ui8AddressY_ = 0;

            // Clear display
            fClearDisplay_();

            // Store command
            lastCommand_ = CT_Clear;

            // Update data target
            dataTarget_ = DT_DDRAM;
        }
    }
}

void St7920Emulator::parseDataByte() {
    // Check for data target
    if (dataTarget_ == DT_CGRAM) {
        // Write data to CGRAM
        pCgRam_[ui8AddressY_][ui8AddressX_] = pByteFlip[ui8DataByte_];

        // Increase address
        if (ui8AddressX_ == 0) {
            ui8AddressX_ = 1;
        } else {
            ui8AddressX_ = 0;
            if (ui8AddressY_ >= 63) {
                ui8AddressY_ = 0;
            } else {
                ++ui8AddressY_;
            }
        }
    } else if (dataTarget_ == DT_GDRAM) {
        // Set byte
        pGdRam_[ui8AddressY_][ui8AddressX_] = pByteFlip[ui8DataByte_];
        showByte(ui8AddressX_, ui8AddressY_);

        // Increase address
        if (ui8AddressX_ < 15) {
            ++ui8AddressX_;
        } else {
            ui8AddressX_ = 0;
            ui8AddressY_ = (ui8AddressY_ + 32) & 0b111111;
        }
    } else if (dataTarget_ == DT_DDRAM) {
        // Get current byte
        uint8_t ui8Tmp = pDdRam_[ui8AddressY_ / 16][ui8AddressX_];

        // Update DDRAM
        pDdRam_[ui8AddressY_ / 16][ui8AddressX_] = ui8DataByte_;

        // Check if chargen char was requested
        if (((ui8AddressX_ & 1) > 0) && (pDdRam_[ui8AddressY_ / 16][ui8AddressX_ & 0b1110] == 0)) {
            // Draw char
            for (uint8_t i = 0, y = ui8AddressY_; i < 16; ++i, ++y) {
                showByte(ui8AddressX_ - 1, y);
                showByte(ui8AddressX_, y);
            }
        }
        // Check for halfsize font
        else if ((ui8DataByte_ > 0) && (ui8DataByte_ <= 0x7F)) {
            // Draw char
            for (uint8_t i = 0, y = ui8AddressY_; i < 16; ++i, ++y) {
                showByte(ui8AddressX_, y);
            }

            // Check if chargen char has been overwritten
            if ((ui8Tmp == 0) && ((ui8AddressX_ & 0b1) == 0)) {
                // Clear second char of DDRAM
                ui8Tmp = ui8AddressX_ + 1;
                pDdRam_[ui8AddressY_ / 16][ui8Tmp] = 0x20;

                // Update display
                for (uint8_t i = 0, y = ui8AddressY_; i < 16; ++i, ++y) {
                    showByte(ui8Tmp, y);
                }
            }
        }

        // Update cursor
        if (ui8AddressX_ < 15) {
            ++ui8AddressX_;
        } else {
            ui8AddressX_ = 0;
            switch (ui8AddressY_) {
                case 0: ui8AddressY_ = 32; break;
                case 16: ui8AddressY_ = 48; break;
                case 32: ui8AddressY_ = 16; break;
                case 48: ui8AddressY_ = 0; break;
            }
        }
    }
}

void St7920Emulator::parseSerialData(uint8_t ui8Data) {
    // Check if byte is not a sync byte
    if (parseSyncByte(ui8Data) == 0) {
        // Reconstruct byte
        if (ui8DataNibbleIdx_ == 0) {
            // Store higher nibble
            ui8DataByte_ = ui8Data & 0xF0;

            // Update flag
            ui8DataNibbleIdx_ = 1;
        } else {
            // Store lower byte
            ui8DataByte_ |= (ui8Data >> 4) & 0x0F;

            // Clear flag
            ui8DataNibbleIdx_ = 0;

            // Check how to parse the byte
            if (syncByteType_ == SBT_Command) {
                // Parse command
                parseCommandByte();
            } else if (syncByteType_ == SBT_Data) {
                // Parse data
                parseDataByte();
            }
        }
    }
}

uint8_t St7920Emulator::parseSyncByte(uint8_t ui8Data) {
    // Check for sync byte pattern
    if ((ui8Data & 0b11111000) == 0b11111000) {
        // Check for R/W bit
        if ((ui8Data & 0b100) > 0) {
            // Invalid sync byte
            syncByteType_ = SBT_None;
        }
        // Check for RS bit
        else if ((ui8Data & 0b10) > 0) {
            // Switch to data mode
            syncByteType_ = SBT_Data;

            // Clear last command
            lastCommand_ = CT_None;
        }
        // Command mode
        else {
            // Switch to command mode
            syncByteType_ = SBT_Command;

            // Clear data target
            dataTarget_ = DT_None;
        }

        // Reset data nibble flag
        ui8DataNibbleIdx_ = 0;

        // Found sync byte
        return 1;
    }

    // Not a sync byte
    return 0;
}

void St7920Emulator::reset(bool bClearDisplay) {
    // Init enums
    lastCommand_  = CT_None;
    dataTarget_   = DT_None;
    syncByteType_ = SBT_None;

    // Init byte decoding
    ui8DataNibbleIdx_ = 0;
    ui8DataByte_      = 0;

    // Init variables set by commands
    ui8EnableVerticalScroll_ = 0;
    ui8ExtendedMode_         = 0;
    ui8GraphicMode_          = 0;
    ui8AddressX_             = 0;
    ui8AddressY_             = 0;

    // Init rams
    for (uint8_t i = 0; i < 64; ++i) {
        for (uint8_t j = 0; j < 2; ++j) {
            pCgRam_[i][j] = 0;
        }
    }
    for (uint8_t i = 0; i < 4; ++i) {
        for (uint8_t j = 0; j < 32; ++j) {
            pDdRam_[i][j] = 0;
        }
    }
    for (uint8_t i = 0; i < 64; ++i) {
        for (uint8_t j = 0; j < 16; ++j) {
            pGdRam_[i][j] = 0;
        }
    }

    // Check if we shall clear the display area
    if (bClearDisplay) {
        // Clear display
        fClearDisplay_();
    }
}

void St7920Emulator::showByte(uint8_t x, uint8_t y) {
    // Get DDRAM byte
    uint8_t ui8DdRam;
    uint8_t ui8CharY     = y & 0b1111; // Row in the current char
    uint8_t ui8ColXStart = x & 0b1110; // Two columns are in the same block
    uint8_t ui8ColY      = y / 16;     // Current column (each column is 16 bit high)

    // Check if chargen flag is set
    if (pDdRam_[ui8ColY][ui8ColXStart] == 0) {
        // Get char index
        uint8_t ui8CharIdx = (pDdRam_[ui8ColY][ui8ColXStart + 1] & 0b110) * 8 + ui8CharY;

        // Check if the current column is the first column of the character
        if (x == ui8ColXStart) {
            // Get higher byte of the character
            ui8DdRam = pCgRam_[ui8CharIdx][0];
        } else {
            // Get lower byte of the character
            ui8DdRam = pCgRam_[ui8CharIdx][1];
        }
    } else {
        // Get regular char index
        uint16_t ui16CharIdx = (pDdRam_[ui8ColY][x] - 1) * 16 + ui8CharY;

        // Get character byte
        ui8DdRam = pFont816[ui16CharIdx];
    }

    // Show result of DDRAM XOR GDRAM
    fDrawByte_(x * 8, y, ui8DdRam ^ pGdRam_[y][x]);
}

const uint8_t St7920Emulator::pByteFlip[256] = {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,
    0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
    0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
    0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4,
    0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC,
    0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
    0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
    0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
    0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6,
    0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
    0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
    0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1,
    0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9,
    0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
    0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
    0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED,
    0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3,
    0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
    0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
    0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7,
    0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF,
    0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};

const uint8_t St7920Emulator::pFont816[4080] = {
    0xFF,0xFF,0xFF,0x81,0x00,0x24,0x00,0x00,0x3C,0x18,0x00,0x81,0xFF,0xFF,0xFF,0x00, // 0x01
    0x00,0x00,0x00,0x7E,0xFF,0xDB,0xFF,0xFF,0xC3,0xE7,0xFF,0x7E,0x00,0x00,0x00,0x00, // 0x02
    0x00,0x00,0x00,0x00,0x6C,0xFE,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00, // 0x03
    0x00,0x00,0x00,0x00,0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00,0x00, // 0x04
    0x00,0x00,0x00,0x18,0x3C,0x3C,0xE7,0xE7,0xE7,0x18,0x18,0x3C,0x00,0x00,0x00,0x00, // 0x05
    0x00,0x00,0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x7E,0x18,0x18,0x3C,0x00,0x00,0x00,0x00, // 0x06
    0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x3C,0x3C,0x18,0x00,0x00,0x00,0x00,0x00,0x00, // 0x07
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC3,0xC3,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0x00, // 0x08
    0x00,0x00,0x00,0x00,0x00,0x3C,0x66,0x42,0x42,0x66,0x3C,0x00,0x00,0x00,0x00,0x00, // 0x09
    0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0x99,0xBD,0xBD,0x99,0xC3,0xFF,0xFF,0xFF,0xFF,0x00, // 0x0A
    0x00,0x00,0x00,0xF0,0xE0,0xB0,0x98,0x3C,0x66,0x66,0x66,0x3C,0x00,0x00,0x00,0x00, // 0x0B
    0x00,0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00, // 0x0C
    0x00,0x00,0x00,0xFC,0xCC,0xFC,0x0C,0x0C,0x0C,0x0E,0x0F,0x07,0x00,0x00,0x00,0x00, // 0x0D
    0x00,0x00,0x00,0xFE,0xC6,0xFE,0xC6,0xC6,0xC6,0xE6,0xE7,0x67,0x03,0x00,0x00,0x00, // 0x0E
    0x00,0x00,0x00,0x18,0x18,0xDB,0x3C,0xE7,0x3C,0xDB,0x18,0x18,0x00,0x00,0x00,0x00, // 0x0F

    0x00,0x00,0x00,0x02,0x06,0x0E,0x3E,0xFE,0x3E,0x0E,0x06,0x02,0x00,0x00,0x00,0x00, // 0x10
    0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xFE,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00, // 0x11
    0x00,0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00, // 0x12
    0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x00,0xCC,0xCC,0x00,0x00,0x00,0x00, // 0x13
    0x00,0x00,0x00,0xFE,0xDB,0xDB,0xDB,0xDE,0xD8,0xD8,0xD8,0xD8,0x00,0x00,0x00,0x00, // 0x14
    0x00,0x00,0x7C,0xC6,0x0C,0x38,0x6C,0xC6,0xC6,0x6C,0x38,0x60,0xC6,0x7C,0x00,0x00, // 0x15
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0x00,0x00,0x00,0x00, // 0x16
    0x00,0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x7E,0x3C,0x18,0x7E,0x00,0x00,0x00, // 0x17
    0x00,0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00, // 0x18
    0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00, // 0x19
    0x00,0x00,0x00,0x00,0x00,0x30,0x60,0xFE,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00, // 0x1A
    0x00,0x00,0x00,0x00,0x00,0x18,0x0C,0xFE,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00, // 0x1B
    0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x06,0xFE,0x00,0x00,0x00,0x00,0x00,0x00, // 0x1C
    0x00,0x00,0x00,0x00,0x00,0x24,0x66,0xFF,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00, // 0x1D
    0x00,0x00,0x00,0x00,0x10,0x38,0x38,0x7C,0x7C,0xFE,0xFE,0x00,0x00,0x00,0x00,0x00, // 0x1E
    0x00,0x00,0x00,0x00,0xFE,0xFE,0x7C,0x7C,0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00, // 0x1F

    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x20  
    0x00,0x00,0x00,0x18,0x3C,0x3C,0x3C,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00, // 0x21 !
    0x00,0x00,0xC6,0xC6,0xC6,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x22 "
    0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00, // 0x23 #
    0x00,0x30,0x30,0x7C,0xC6,0x86,0x06,0x7C,0xC0,0xC2,0xC6,0x7C,0x30,0x30,0x00,0x00, // 0x24 $
    0x00,0x00,0x00,0x00,0x00,0x86,0xC6,0x60,0x30,0x18,0xCC,0xC6,0x00,0x00,0x00,0x00, // 0x25 %
    0x00,0x00,0x00,0x38,0x6C,0x6C,0x38,0xDC,0x76,0x66,0x66,0xDC,0x00,0x00,0x00,0x00, // 0x26 &
    0x00,0x00,0x30,0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x27 '
    0x00,0x00,0x00,0x30,0x18,0x0C,0x0C,0x0C,0x0C,0x0C,0x18,0x30,0x00,0x00,0x00,0x00, // 0x28 (
    0x00,0x00,0x00,0x0C,0x18,0x30,0x30,0x30,0x30,0x30,0x18,0x0C,0x00,0x00,0x00,0x00, // 0x29 )
    0x00,0x00,0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00, // 0x2A *
    0x00,0x00,0x00,0x00,0x18,0x18,0x18,0xFF,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00, // 0x2B +
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x0C,0x06,0x00,0x00,0x00, // 0x2C ,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x2D -
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00, // 0x2E .
    0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,0x00,0x00,0x00,0x00, // 0x2F /

    0x00,0x00,0x00,0x7C,0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x30 0
    0x00,0x00,0x00,0x30,0x38,0x3C,0x30,0x30,0x30,0x30,0x30,0xFC,0x00,0x00,0x00,0x00, // 0x31 1
    0x00,0x00,0x00,0x7C,0xC6,0xC0,0x60,0x30,0x18,0x0C,0xC6,0xFE,0x00,0x00,0x00,0x00, // 0x32 2
    0x00,0x00,0x00,0x7C,0xC6,0xC0,0xC0,0x78,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x33 3
    0x00,0x00,0x00,0x60,0x70,0x78,0x6C,0x66,0xFE,0x60,0x60,0xF0,0x00,0x00,0x00,0x00, // 0x34 4
    0x00,0x00,0x00,0xFE,0x06,0x06,0x06,0x7E,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x35 5
    0x00,0x00,0x00,0x38,0x0C,0x06,0x06,0x7E,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x36 6
    0x00,0x00,0x00,0xFE,0xC6,0xC0,0x60,0x30,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00, // 0x37 7
    0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x38 8
    0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xFC,0xC0,0xC0,0x60,0x3C,0x00,0x00,0x00,0x00, // 0x39 9
    0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00, // 0x3A :
    0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x0C,0x00,0x00,0x00,0x00, // 0x3B ;
    0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00,0x00,0x00,0x00, // 0x3C <
    0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x3D =
    0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x06,0x00,0x00,0x00,0x00, // 0x3E >
    0x00,0x00,0x00,0x7C,0xC6,0xC6,0x60,0x30,0x30,0x00,0x30,0x30,0x00,0x00,0x00,0x00, // 0x3F ?

    0x00,0x00,0x00,0x7C,0xC6,0xC6,0xF6,0xF6,0xF6,0x76,0x06,0x7C,0x00,0x00,0x00,0x00, // 0x40 @
    0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00, // 0x41 A
    0x00,0x00,0x00,0x7E,0xCC,0xCC,0xCC,0x7C,0xCC,0xCC,0xCC,0x7E,0x00,0x00,0x00,0x00, // 0x42 B
    0x00,0x00,0x00,0x78,0xCC,0x86,0x06,0x06,0x06,0x86,0xCC,0x78,0x00,0x00,0x00,0x00, // 0x43 C
    0x00,0x00,0x00,0x3E,0x6C,0xCC,0xCC,0xCC,0xCC,0xCC,0x6C,0x3E,0x00,0x00,0x00,0x00, // 0x44 D
    0x00,0x00,0x00,0xFE,0xCC,0x8C,0x2C,0x3C,0x2C,0x8C,0xCC,0xFE,0x00,0x00,0x00,0x00, // 0x45 E
    0x00,0x00,0x00,0xFE,0xCC,0x8C,0x2C,0x3C,0x2C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00, // 0x46 F
    0x00,0x00,0x00,0x78,0xCC,0x86,0x06,0x06,0xF6,0xC6,0xCC,0xB8,0x00,0x00,0x00,0x00, // 0x47 G
    0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00, // 0x48 H
    0x00,0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00, // 0x49 I
    0x00,0x00,0x00,0xF0,0x60,0x60,0x60,0x60,0x60,0x66,0x66,0x3C,0x00,0x00,0x00,0x00, // 0x4A J
    0x00,0x00,0x00,0xCE,0xCC,0x6C,0x6C,0x3C,0x6C,0x6C,0xCC,0xCE,0x00,0x00,0x00,0x00, // 0x4B K
    0x00,0x00,0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0x8C,0xCC,0xFE,0x00,0x00,0x00,0x00, // 0x4C L
    0x00,0x00,0x00,0xC6,0xEE,0xFE,0xD6,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00, // 0x4D M
    0x00,0x00,0x00,0xC6,0xCE,0xDE,0xFE,0xF6,0xE6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00, // 0x4E N
    0x00,0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00, // 0x4F O

    0x00,0x00,0x00,0x7E,0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00, // 0x50 P
    0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xD6,0xF6,0x7C,0x60,0xE0,0x00,0x00,0x00, // 0x51 Q
    0x00,0x00,0x00,0x7E,0xCC,0xCC,0xCC,0x7C,0x6C,0xCC,0xCC,0xCE,0x00,0x00,0x00,0x00, // 0x52 R
    0x00,0x00,0x00,0x7C,0xC6,0xC6,0x0C,0x38,0x60,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x53 S
    0x00,0x00,0x00,0xFF,0x99,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00, // 0x54 T
    0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x55 U
    0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00, // 0x56 V
    0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00,0x00,0x00,0x00, // 0x57 W
    0x00,0x00,0x00,0xC6,0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00, // 0x58 X
    0x00,0x00,0x00,0xC6,0xC6,0xC6,0x6C,0x38,0x38,0x38,0x38,0x7C,0x00,0x00,0x00,0x00, // 0x59 Y
    0x00,0x00,0x00,0xFE,0xC6,0x62,0x30,0x18,0x0C,0x86,0xC6,0xFE,0x00,0x00,0x00,0x00, // 0x5A Z
    0x00,0x00,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,0x00,0x00, // 0x5B [
    0x00,0x00,0x00,0x02,0x06,0x0E,0x1C,0x38,0x70,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00, // 0x5C back_slash
    0x00,0x00,0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00,0x00,0x00, // 0x5D ]
    0x00,0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x5E ^
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00, // 0x5F _

    0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x60 `
    0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x60,0x7C,0x66,0x66,0xDC,0x00,0x00,0x00,0x00, // 0x61 a
    0x00,0x00,0x00,0x0E,0x0C,0x0C,0x3C,0x6C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00, // 0x62 b
    0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x63 c
    0x00,0x00,0x00,0x70,0x60,0x60,0x78,0x6C,0x66,0x66,0x66,0xDC,0x00,0x00,0x00,0x00, // 0x64 d
    0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xFE,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x65 e
    0x00,0x00,0x00,0x38,0x6C,0x4C,0x0C,0x3E,0x0C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00, // 0x66 f
    0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x7C,0x60,0x66,0x3C,0x00,0x00, // 0x67 g
    0x00,0x00,0x00,0x0E,0x0C,0x0C,0x6C,0xDC,0xCC,0xCC,0xCC,0xCE,0x00,0x00,0x00,0x00, // 0x68 h
    0x00,0x00,0x00,0x30,0x30,0x00,0x38,0x30,0x30,0x30,0x30,0x78,0x00,0x00,0x00,0x00, // 0x69 i
    0x00,0x00,0x00,0x60,0x60,0x00,0x70,0x60,0x60,0x60,0x60,0x66,0x66,0x3C,0x00,0x00, // 0x6A j
    0x00,0x00,0x00,0x0E,0x0C,0x0C,0xCC,0x6C,0x3C,0x6C,0xCC,0xCE,0x00,0x00,0x00,0x00, // 0x6B k
    0x00,0x00,0x00,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,0x00,0x00, // 0x6C l
    0x00,0x00,0x00,0x00,0x00,0x00,0x44,0xFE,0xD6,0xD6,0xD6,0xD6,0x00,0x00,0x00,0x00, // 0x6D m
    0x00,0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0xCC,0x00,0x00,0x00,0x00, // 0x6E n
    0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x6F o

    0x00,0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x1E,0x00,0x00, // 0x70 p
    0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,0x00, // 0x71 q
    0x00,0x00,0x00,0x00,0x00,0x00,0x76,0xDC,0xCC,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00, // 0x72 r
    0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0x1C,0x70,0xC6,0x7C,0x00,0x00,0x00,0x00, // 0x73 s
    0x00,0x00,0x00,0x10,0x18,0x18,0x7E,0x18,0x18,0x18,0xD8,0x70,0x00,0x00,0x00,0x00, // 0x74 t
    0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0xDC,0x00,0x00,0x00,0x00, // 0x75 u
    0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00, // 0x76 v
    0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xD6,0xFE,0x6C,0x00,0x00,0x00,0x00, // 0x77 w
    0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00, // 0x78 x
    0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFC,0xC0,0x60,0x3C,0x00,0x00, // 0x79 y
    0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x66,0x30,0x18,0xCC,0xFE,0x00,0x00,0x00,0x00, // 0x7A z
    0x00,0x00,0x00,0x70,0x18,0x18,0x18,0x0E,0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00, // 0x7B {
    0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00, // 0x7C |
    0x00,0x00,0x00,0x0E,0x18,0x18,0x18,0x70,0x18,0x18,0x18,0x0E,0x00,0x00,0x00,0x00, // 0x7D }
    0x00,0x00,0x00,0xDC,0x76,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x7E ~
    0x00,0x00,0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0x00,0x00,0x00,0x00,0x00, // 0x7F
};